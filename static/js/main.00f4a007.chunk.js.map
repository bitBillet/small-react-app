{"version":3,"sources":["reducers/index.js","store.js","actions/index.js","smart/header.js","smart/main.js","smart/aboutMovie.js","App.js","serviceWorker.js","index.js"],"names":["combineReducers","items","state","action","type","payload","itemsIsLoading","isLoad","store","createStore","reducers","applyMiddleware","thunk","itemsFetchData","url","dispatch","a","fetch","json","then","Header","searchHandler","event","text","target","value","props","fetchData","Container","fluid","className","placeholder","onChange","this","Component","connect","Main","gallery","rows","map","item","index","show","id","image","name","Col","key","to","src","medium","alt","style","marginTop","i","length","push","Row","lg","console","log","match","params","number","summary","original","replace","App","exact","path","component","Info","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.00f4a007.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\nfunction items (state = [], action) {\r\n    if (action.type === 'FETCH_DATA_SUCCESS') {\r\n        return action.payload\r\n    }\r\n    return state\r\n}\r\n\r\nfunction itemsIsLoading (isLoad = false, action) {\r\n    if (action.type === 'ITEMS_IS_LOADING') {\r\n        return action.payload\r\n    }\r\n    return isLoad\r\n}\r\n\r\nexport default combineReducers({\r\n    items,\r\n    itemsIsLoading\r\n});\r\n","import reducers from './reducers'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk))\r\nexport default store","export function itemsFetchData (url) {\r\n    return async (dispatch) => {\r\n        const response = await fetch(url)\r\n        response.json()\r\n        .then(json => {\r\n            dispatch({\r\n                type: 'FETCH_DATA_SUCCESS',\r\n                payload: json\r\n            })\r\n            dispatch({\r\n                type: 'ITEMS_IS_LOADING',\r\n                payload: true\r\n            })\r\n        })\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Container } from 'reactstrap'\r\nimport { itemsFetchData } from '../actions'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Header extends Component{\r\n    searchHandler = (event) =>{\r\n        let text = event.target.value\r\n        if (!text) this.props.fetchData(`https://api.tvmaze.com/search/shows?q=stargate`)\r\n        else this.props.fetchData(`https://api.tvmaze.com/search/shows?q=${text}`)\r\n    }\r\n    render() {\r\n        return (\r\n          <Container fluid={true} className=\"header\">\r\n            <Container>\r\n              <div>ИСКАТЬ ФИЛЬМ</div>\r\n              <input\r\n                type=\"search\"\r\n                placeholder=\"search movie(eng only)\"\r\n                onChange={this.searchHandler}\r\n              />\r\n              <div>СМОТРЕТЬ ИНФОРМАЦИЮ О ФИЛЬМЕ ПО КЛИКУ</div>\r\n            </Container>\r\n          </Container>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchData: (url) => dispatch(itemsFetchData(url))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Header)\r\n\r\n","import React, { Component } from 'react';\r\nimport { Container, Row, Col} from 'reactstrap'\r\nimport { itemsFetchData } from '../actions'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from \"react-router-dom\"\r\nimport Header from './header'\r\n\r\n\r\nclass Main extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchData(`https://api.tvmaze.com/search/shows?q=stargate`)\r\n    }\r\n    render() {\r\n        let gallery,\r\n            rows = []\r\n        const { items, isLoad } = this.props\r\n        if (isLoad) {\r\n            gallery = items.map((item, index) => {\r\n                const { id, image, name } = item.show\r\n                return (\r\n                    <Col key={index}>\r\n                     <Link to={`/about/${index}`}>\r\n                         <img src={image ? image.medium : null} alt={id}/>\r\n                     </Link>\r\n                     <p style={{marginTop: 10}}> {name} </p>\r\n                    </Col>\r\n                )\r\n            })\r\n            for (let i = 0; i < gallery.length; i++) {\r\n                rows.push(\r\n                    <Row key = {i} lg=\"3\" className=\"gallery\">\r\n                        {gallery[i]}\r\n                        {gallery[++i]}\r\n                        {gallery[++i]}\r\n                    </Row>\r\n                )\r\n            }\r\n        }\r\n        console.log(items)\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <Container>\r\n                {isLoad ? rows : 'Loading...'}\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        items: state.items,\r\n        isLoad: state.itemsIsLoading\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchData: (url) => dispatch(itemsFetchData(url))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main)\r\n","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { Container, Row, Col } from 'reactstrap'\r\n\r\nconst Info = (props) => {\r\n    const id = props.match.params.number\r\n    const { name, image, summary } = props.items[id].show\r\n    return (\r\n        <Container className=\"pt-4 About\">\r\n            <Row>\r\n                <Col>\r\n                <h1>{name}</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                <img src={image.original} alt={name}/>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"pt-4 pb-5\">\r\n                <Col>\r\n                <h3>\r\n                {summary ? summary.replace(/<[^>]+>/g, '') : null}\r\n                </h3>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        items: state.items\r\n    })\r\n)(Info)","import React from 'react';\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport Main from './smart/main'\nimport Info from './smart/aboutMovie'\nimport { Route, Switch } from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Switch>\n        <Route exact path='/' component={Main} />\n        <Route path='/about/:number' component={Info} />\n      </Switch>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from \"react-router-dom\"\nimport './index.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n      <HashRouter>\n       <App/>\n     </HashRouter>\n    ), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}